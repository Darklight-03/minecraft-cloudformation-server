#!/bin/bash
NoipUsername=$(yq -r .Noip.Username credentials.yaml)
NoipPassword=$(yq -r .Noip.Password credentials.yaml)
DiscordPublicKey=$(yq -r .Discord.BotPublicKey credentials.yaml)
DiscordApplicationId=$(yq -r .Discord.BotApplicationId credentials.yaml)
DiscordBotToken=$(yq -r .Discord.BotToken credentials.yaml)
DiscordIntegrationModBotToken=$(yq -r .Discord.DiscordIntegrationModBotToken credentials.yaml)
WebhookUrl=$(yq -r .Discord.MinecraftChannelWebhookURL credentials.yaml)
IPv4=$(yq -r .Network.IPv4 credentials.yaml)
MCAdmin=$(yq -r .Minecraft.Username credentials.yaml)
AWSKeyPairName=$(yq -r .AWS.KeyPairName credentials.yaml)

ModPackBucket=$(yq -r .AWS.ModpackBucket config.yaml)
Bucket=$(yq -r .AWS.LambdaArtifactBucket config.yaml)
StackName=$(yq -r .AWS.StackName config.yaml)
Region=$(yq -r .AWS.Region config.yaml)
StartSchedule=$(yq -r .Schedule.Start config.yaml)
StopSchedule=$(yq -r .Schedule.Stop config.yaml)
InstanceType=$(yq -r .AWS.InstanceType config.yaml)
SpotPrice=$(yq -r .AWS.SpotPrice config.yaml)
Memory=$(yq -r .Minecraft.Memory config.yaml)
ContainerMemory=$(yq -r .EcsContainer.Memory config.yaml)
ECSAMI=$(yq -r .EcsContainer.AMI config.yaml)
MinecraftVersion=$(yq -r .Minecraft.Version config.yaml)
JavaVersion=$(yq -r .Minecraft.JavaVersion config.yaml)
JVMOpts=$(yq -r .Minecraft.JVMArgs config.yaml)
LevelType=$(yq -r .Minecraft.LevelType config.yaml)
Seed=$(yq -r .Minecraft.Seed config.yaml)

# Do not forget the \ at end of each line when modifying this
ParameterOverrides=(
    NoipUsername="${NoipUsername}" 
    NoipPassword="${NoipPassword}" 
    DiscordPublicKey="${DiscordPublicKey}" 
    DiscordApplicationId="${DiscordApplicationId}" 
    DiscordBotToken="${DiscordBotToken}" 
    WebhookUrl="${WebhookUrl}"
    YourIPv4="${IPv4}"
    AdminPlayerNames="${MCAdmin}"
    KeyPairName="${AWSKeyPairName}"
    Bucket="${ModPackBucket}"
    StartScheduleCron="${StartSchedule}"
    StopScheduleCron="${StopSchedule}"
    InstanceType="${InstanceType}"
    SpotPrice="${SpotPrice}"
    Memory="${Memory}"
    ContainerMemory="${ContainerMemory}"
    ECSAMI="${ECSAMI}"
    MinecraftVersion="${MinecraftVersion}"
    MinecraftImageTag="${JavaVersion}"
    JVMOpts="${JVMOpts}"
    LevelType="${LevelType}"
    Seed="${Seed}"
)

### Set up environment ###
python3 -m venv "venvs/base_env"
source venvs/base_env/bin/activate

# clean up old build artifacts
rm build/packaged-template.yaml > /dev/null 2>&1 

echo "Cleaning up old build"
./clean

if [[ "$1" == "install" ]]
then
    ./install
fi

if ! ./test; then
    read -r -p "Tests failed, continue anyway? [y/N] " response
    response=${response,,}    # tolower
    if ! [[ "$response" =~ ^(yes|y)$ ]]
    then
        exit 1
    fi
fi

### Package for deployment ###

# reclean and update so files aren't modified by pytest
echo "Cleaning up tests"
./clean

mkdir build > /dev/null 2>&1

for D in src/*; do
    if [ -d "${D}" ]; then
        function_name=$(basename "${D}")

        # Create a separate virtual environment for each Lambda function
        echo "Setting up virtual environment for ${function_name}"
        python3 -m venv "venvs/${function_name}_env"

        # Activate the virtual environment
        source "venvs/${function_name}_env/bin/activate"

        echo "packaging ${function_name}"
        # do some fucked shit to get lambda to be able to import all the files
        mkdir "build/${function_name}" > /dev/null 2>&1
        mv "build/${function_name}"/* "build/${function_name}/${function_name}" > /dev/null 2>&1
        cp -r "${D}/" "build/${function_name}/${function_name}" > /dev/null 2>&1
        mv "build/${function_name}/${function_name}/lambda_handler.py" "build/${function_name}/lambda_handler.py" > /dev/null 2>&1

        # install dependencies into lambda package
        pip3 install -r "build/${function_name}/${function_name}/requirements.txt" -t "build/${function_name}/." > /dev/null 2>&1
    fi
done

mkdir resources/minecraft > /dev/null 2>&1
mkdir resources/minecraft/config > /dev/null 2>&1
mkdir resources/minecraft/mods > /dev/null 2>&1

aws cloudformation package --template-file resources/cloudformation/minecraft-infrastructure.yaml --s3-bucket "${Bucket}" --output-template-file build/packaged-template.yaml
cp resources/minecraft-config/* resources/minecraft/config/.
sed -i "s/^  botToken = .*/  botToken = \"${DiscordIntegrationModBotToken}\"/" resources/minecraft/config/Discord-Integration.toml
(cd resources/modpack && zip -r ../minecraft/modpack.zip ./* > /dev/null 2>&1)
aws s3 sync resources/minecraft/ s3://"${ModPackBucket}"/ --delete

echo ""
read -r -p "Packaging complete, would you like to deploy to ${StackName} in ${Region}? [y/N] " response
response=${response,,}    # tolower
if [[ "$response" =~ ^(yes|y)$ ]]
then
    ### Deploy ###
    aws cloudformation deploy --template-file build/packaged-template.yaml --stack-name "${StackName}" --region "${Region}" --capabilities CAPABILITY_IAM --parameter-overrides "${ParameterOverrides[@]}"
    aws cloudformation set-stack-policy --stack-name "${StackName}" --stack-policy-body "file://resources/cloudformation/stack-policy.json"
else
    exit 0
fi

