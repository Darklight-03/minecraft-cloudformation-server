AWSTemplateFormatVersion: "2010-09-09"
Description: Modded MC Server Server via Docker / ECS
Parameters:

  ECSAMI:
    Description: AWS ECS AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

  ServerState:
    Type: String
    Description: "Running: A spot instance will launch shortly after setting this parameter; your Minecraft server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Minecraft container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues: 
    - Running
    - Stopped

  InstanceType:
    Type: String
    Description: "t3.medium is a good cost effective instance, 1 VCPU and 3.75 GB of RAM with moderate network performance. Change at your discretion. https://aws.amazon.com/ec2/instance-types/."
    Default: m5zn.large

  SpotPrice:
    Type: String
    Description: "A t3.medium shouldn't cost more than a cent per hour. Note: Leave this blank to use on-demand pricing."
    Default: "0.12"

  KeyPairName:
    Type: String
    Description: (Optional - An empty value disables this feature)
    Default: ''

  YourIPv4:
    Type: String
    Description: (Optional - An empty value disables this feature)
    Default: ''

  YourIPv6:
    Type: String
    Description: (Optional - An empty value disables this feature)
    Default: ''

  HostedZoneId:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Minecraft instance starts, supply the hosted zone ID here.
    Default: ''

  RecordName:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Minecraft instance starts, supply the name of the record here (e.g. minecraft.mydomain.com).
    Default: ''

  MinecraftImageTag:
    Type: String
    Description: "Java version (Examples include latest, adopt13, openj9, etc) Refer to tag descriptions available here: https://github.com/itzg/docker-minecraft-server)"
    Default: 'java8'

  MinecraftTypeTag:
    Type: String
    Description: "(Examples include SPIGOT, BUKKIT, TUINITY, etc) Refer to tag descriptions available here: https://github.com/itzg/docker-minecraft-server)"
    Default: CURSEFORGE

  AdminPlayerNames:
    Type: String
    Description: Op/Administrator Players
    Default: ''

  Difficulty:
    Type: String
    Description: "The game's difficulty"
    Default: hard
    AllowedValues:
    - peaceful
    - easy
    - normal
    - hard

  Whitelist:
    Type: String
    Description: Usernames of your friends
    Default: ''

  MinecraftVersion:
    Type: String
    Description: Server minecraft version
    Default: ''

  Memory:
    Type: String
    Description: How much Memory to allocate for the JVM
    Default: '6G'

  Seed:
    Type: String
    Default: ''
    Description: The seed used to generate the world

  MaxPlayers:
    Type: Number
    Description: Max number of players that can connect simultaneously (default 20)
    Default: 20

  ViewDistance:
    Type: Number
    Description: Max view radius (in chunks) the server will send to the client (default 10)
    Default: 10

  GameMode:
    Type: String
    Description: "Options: creative, survival (default), adventure, spectator (v1.8+)"
    Default: survival
    AllowedValues:
    - creative
    - survival
    - adventure
    - spectator

  LevelType:
    Type: String
    Description: "Options: DEFAULT, FLAT, LARGEBIOMES, AMPLIFIED, CUSTOMIZED, BUFFET, BIOMESOP (v1.12-), BIOMESOPLENTY (v1.15+)"
    Default: DEFAULT
    AllowedValues:
    - DEFAULT
    - FLAT
    - LARGEBIOMES
    - AMPLIFIED
    - CUSTOMIZED
    - BUFFET
    - BIOMESOP
    - BIOMESOPLENTY

  EnableRollingLogs:
    Type: String
    Description: "By default the log file will grow without limit. Set to true to use a rolling log strategy."
    Default: true
    AllowedValues:
    - true
    - false

  Timezone:
    Type: String
    Description: "Change the server's timezone. Use the canonical name of the format: Area/Location (e.g. America/New_York)"
    Default: America/Los_Angeles

  MOTD: 
    Type: String
    Description: Message of the Day
    Default: ItsaServer PagMan

  NoipUsername:
    Type: String
    Description: username for no-ip.com

  NoipPassword:
    Type: String
    Description: password for no-ip.com
  
  DiscordPublicKey:
    Type: String
    Description: public key for discord bot
  
  DiscordBotToken:
    Type: String
    Description: token for discord bot

  DiscordApplicationId:
    Type: String
    Description: application id for discord bot

  WebhookUrl:
    Type: String
    Description: webhook url for discord channel

  Bucket:
    Type: String
    Description: bucket where modpack.zip is located

  StartScheduleCron:
    Type: String
    Description: Cron Schedule to start server

  StopScheduleCron:
    Type: String
    Description: Cron Schedule to stop server

# Not up to date
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: 
          default: Essential Configuration
        Parameters:
        - ServerState
        - InstanceType
        - SpotPrice
      - Label:
          default: Server Settings
        Parameters:
        - MinecraftImageTag
      - Label:
          default: Optional Server Settings
        Parameters:
        - MinecraftTypeTag
        - AdminPlayerNames
        - Difficulty
        - Whitelist
        - MinecraftVersion
        - Memory
        - Seed
        - MaxPlayers
        - ViewDistance
        - GameMode
        - LevelType
        - EnableRollingLogs
        - Timezone
      - Label: 
          default: Optional Remote Access (SSH) Configuration
        Parameters:
        - KeyPairName
        - YourIPv4
        - YourIPv6
      - Label: 
          default: Optional DNS Configuration
        Parameters:
        - HostedZoneId
        - RecordName
    ParameterLabels:
      ServerState:
        default: "Update this parameter to shut down / start up your Minecraft server as required to save on cost. Takes a few minutes to take effect."
      InstanceType:
        default: "Which instance type? You must make sure this is available in your region! https://aws.amazon.com/ec2/pricing/on-demand/"
      SpotPrice:
        default: "Maximum spot price per hour? Leave blank to disable spot pricing."
      MinecraftImageTag:
        default: "Which version of Minecraft do you want to launch?"
      MinecraftTypeTag:
        default: "Which type of Minecraft do you want to launch?"
      AdminPlayerNames:
        default: "A comma delimited list (no spaces) of player names to be admins"
      Difficulty:
        default: "Which difficulty?"
      Whitelist:
        default: "A comma delimited list (no spaces) of player names"
      MinecraftVersion:
        default: "Minecraft version ie 1.16.3"
      KeyPairName:
        default: "If you wish to access the instance via SSH, select a Key Pair to use. https://console.aws.amazon.com/ec2/v2/home?#KeyPairs:sort=keyName"
      YourIPv4:
        default: "If you wish to access the instance via SSH and using IPv4, provide it."
      YourIPv6:
        default: "If you wish to access the instance via SSH and using IPv6, provide it."
      HostedZoneId:
        default: "If you have a hosted zone in Route 53 and wish to update a DNS record whenever your Minecraft instance starts, supply the hosted zone ID here."
      RecordName:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Minecraft instance starts, supply a record name here (e.g. minecraft.mydomain.com)."
      Memory:
        default: "If you wish to increase the Java memory-heap limit of 1GB. Format: <size>[g|G|m|M|k|K]"
      Seed:
        default: "Seed for world generation"
      MaxPlayers:
        default: "Max simultaneous players"
      ViewDistance:
        default: "Max view distance"
      GameMode:
        default: "The Minecraft game mode"
      LevelType:
        default: "Level type for world generation"
      EnableRollingLogs:
        default: "Whether to enable rolling logs"
      Timezone:
        default: "The server's timezone"

Conditions:
  MinecraftTypeTagProvided: !Not [ !Equals [ !Ref MinecraftTypeTag, '' ] ]
  AdminPlayerNamesProvided: !Not [ !Equals [ !Ref AdminPlayerNames, '' ] ]
  DifficultyProvided: !Not [ !Equals [ !Ref Difficulty, '' ] ]
  WhitelistProvided: !Not [ !Equals [ !Ref Whitelist, '' ] ]
  MinecraftVersionProvided: !Not [ !Equals [ !Ref MinecraftVersion, '' ] ]
  KeyPairNameProvided: !Not [ !Equals [ !Ref KeyPairName, '' ] ]
  IPv4AddressProvided: !Not [ !Equals [ !Ref YourIPv4, '' ] ]
  IPv6AddressProvided: !Not [ !Equals [ !Ref YourIPv6, '' ] ]
  DnsConfigEnabled: !And [ !Not [ !Equals [ !Ref HostedZoneId, '' ] ], !Not [ !Equals [ !Ref RecordName, '' ] ] ]
  SpotPriceProvided: !Not [ !Equals [ !Ref SpotPrice, '' ] ]
  MemoryProvided: !Not [ !Equals [ !Ref Memory, '' ] ]
  SeedProvided: !Not [ !Equals [ !Ref Seed, '' ] ]
  MaxPlayersProvided: !Not [ !Equals [ !Ref MaxPlayers, '' ] ]
  ViewDistanceProvided: !Not [ !Equals [ !Ref ViewDistance, '' ] ]
  GameModeProvided: !Not [ !Equals [ !Ref GameMode, '' ] ]
  LevelTypeProvided: !Not [ !Equals [ !Ref LevelType, '' ] ]
  EnableRollingLogsProvided: !Not [ !Equals [ !Ref EnableRollingLogs, '' ] ]
  TimezoneProvided: !Not [ !Equals [ !Ref Timezone, '' ] ]
  MOTDProvided: !Not [ !Equals [ !Ref MOTD, '' ] ]



Mappings:
  ServerState:
    Running:
      DesiredCapacity: 1
    Stopped:
      DesiredCapacity: 0

Resources:

  # ====================================================
  # BASIC VPC
  # ====================================================

  Vpc: 
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.100.0.0/26
      EnableDnsSupport: true
      EnableDnsHostnames: true

  SubnetBRoute:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetB  

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select 
      - 1
      - !GetAZs 
        Ref: 'AWS::Region'
      CidrBlock: !Select [ 1, !Cidr [ 10.100.0.0/26, 4, 4 ] ]
      VpcId: !Ref Vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: {}

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref Vpc    

  Route:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable

  # ==============
  # LifeCycle Hook
  # ==============

  LambdaFunctionForASG:
    Type: AWS::Lambda::Function
    Properties:
      Description: Gracefully drain ECS tasks from EC2 instances before the instances are
                   terminated by autoscaling.
      Handler: index.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.6
      MemorySize: 128
      Timeout: 60
      Code:
        ZipFile: !Sub |
          import json
          import time
          import boto3
          CLUSTER = '${!Ref EcsCluster}'
          REGION = '${AWS::Region}'
          ECS = boto3.client('ecs', region_name=REGION)
          ASG = boto3.client('autoscaling', region_name=REGION)
          SNS = boto3.client('sns', region_name=REGION)
          def find_ecs_instance_info(instance_id):
              paginator = ECS.get_paginator('list_container_instances')
              for list_resp in paginator.paginate(cluster=CLUSTER):
                  arns = list_resp['containerInstanceArns']
                  desc_resp = ECS.describe_container_instances(cluster=CLUSTER,
                                                               containerInstances=arns)
                  for container_instance in desc_resp['containerInstances']:
                      if container_instance['ec2InstanceId'] != instance_id:
                          continue
                      print('Found instance: id=%s, arn=%s, status=%s, runningTasksCount=%s' %
                            (instance_id, container_instance['containerInstanceArn'],
                             container_instance['status'], container_instance['runningTasksCount']))
                      return (container_instance['containerInstanceArn'],
                              container_instance['status'], container_instance['runningTasksCount'])
              return None, None, 0
          def instance_has_running_tasks(instance_id):
              (instance_arn, container_status, running_tasks) = find_ecs_instance_info(instance_id)
              if instance_arn is None:
                  print('Could not find instance ID %s. Letting autoscaling kill the instance.' %
                        (instance_id))
                  return False
              if container_status != 'DRAINING':
                  print('Setting container instance %s (%s) to DRAINING' %
                        (instance_id, instance_arn))
                  ECS.update_container_instances_state(cluster=CLUSTER,
                                                       containerInstances=[instance_arn],
                                                       status='DRAINING')
              return running_tasks > 0
          def lambda_handler(event, context):
              msg = json.loads(event['Records'][0]['Sns']['Message'])
              if 'LifecycleTransition' not in msg.keys() or \
                 msg['LifecycleTransition'].find('autoscaling:EC2_INSTANCE_TERMINATING') == -1:
                  print('Exiting since the lifecycle transition is not EC2_INSTANCE_TERMINATING.')
                  return
              if instance_has_running_tasks(msg['EC2InstanceId']):
                  print('Tasks are still running on instance %s; posting msg to SNS topic %s' %
                        (msg['EC2InstanceId'], event['Records'][0]['Sns']['TopicArn']))
                  time.sleep(5)
                  sns_resp = SNS.publish(TopicArn=event['Records'][0]['Sns']['TopicArn'],
                                         Message=json.dumps(msg),
                                         Subject='Publishing SNS msg to invoke Lambda again.')
                  print('Posted msg %s to SNS topic.' % (sns_resp['MessageId']))
              else:
                  print('No tasks are running on instance %s; setting lifecycle to complete' %
                        (msg['EC2InstanceId']))
                  ASG.complete_lifecycle_action(LifecycleHookName=msg['LifecycleHookName'],
                                                AutoScalingGroupName=msg['AutoScalingGroupName'],
                                                LifecycleActionResult='CONTINUE',
                                                InstanceId=msg['EC2InstanceId'])

  ASGSNSTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        -
          Endpoint:
             Fn::GetAtt:
                - "LambdaFunctionForASG"
                - "Arn"
          Protocol: "lambda"

  LambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
       FunctionName: !Ref LambdaFunctionForASG
       Action: lambda:InvokeFunction
       Principal: "sns.amazonaws.com"
       SourceArn: !Ref ASGSNSTopic

  LambdaSubscriptionToSNSTopic:
    Type: AWS::SNS::Subscription
    Properties:
       Endpoint:
          Fn::GetAtt:
             - "LambdaFunctionForASG"
             - "Arn"
       Protocol: 'lambda'
       TopicArn: !Ref ASGSNSTopic

  ASGTerminateHook:
    Type: "AWS::AutoScaling::LifecycleHook"
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      DefaultResult: "ABANDON"
      HeartbeatTimeout: "180"
      LifecycleTransition: "autoscaling:EC2_INSTANCE_TERMINATING"
      NotificationTargetARN: !Ref ASGSNSTopic
      RoleARN:
         Fn::GetAtt:
         - "SNSLambdaRole"
         - "Arn"

  SNSLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "autoscaling.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AutoScalingNotificationAccessRole
      Path: "/"

  # ===============
  # ?????EXTRA?????
  # ===============

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: Discord

  Deployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: discordbot

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: Discord
      RestApiId: !Ref ApiGateway

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayResource
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 401
          ResponseModels:
            application/json: 'Empty'
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
      Integration: 
        Type: AWS
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DiscordBot.Arn}/invocations
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 401
            SelectionPattern: .*[UNAUTHORIZED].*
          - StatusCode: 200
        RequestTemplates:
          application/json: |
            ##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html
            ##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload
            ##  'rawBody' allows passthrough of the (unsurprisingly) raw request body; similar to flask.request.data
            #set($allParams = $input.params())
            {
            "rawBody": "$util.escapeJavaScript($input.body).replace("\'", "'")",
            "body-json" : $input.json('$'),
            "params" : {
            #foreach($type in $allParams.keySet())
                #set($params = $allParams.get($type))
            "$type" : {
                #foreach($paramName in $params.keySet())
                "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                    #if($foreach.hasNext),#end
                #end
            }
                #if($foreach.hasNext),#end
            #end
            },
            "stage-variables" : {
            #foreach($key in $stageVariables.keySet())
            "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                #if($foreach.hasNext),#end
            #end
            },
            "context" : {
                "account-id" : "$context.identity.accountId",
                "api-id" : "$context.apiId",
                "api-key" : "$context.identity.apiKey",
                "authorizer-principal-id" : "$context.authorizer.principalId",
                "caller" : "$context.identity.caller",
                "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
                "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
                "cognito-identity-id" : "$context.identity.cognitoIdentityId",
                "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
                "http-method" : "$context.httpMethod",
                "stage" : "$context.stage",
                "source-ip" : "$context.identity.sourceIp",
                "user" : "$context.identity.user",
                "user-agent" : "$context.identity.userAgent",
                "user-arn" : "$context.identity.userArn",
                "request-id" : "$context.requestId",
                "resource-id" : "$context.resourceId",
                "resource-path" : "$context.resourcePath"
                }
            }

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DiscordNotifier
      Principal: events.amazonaws.com

  LambdaPermissionApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DiscordBot
      Principal: apigateway.amazonaws.com

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - events.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Policies:
        - PolicyName: root
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action: 
                  - ec2:*
                  - logs:*
                  - autoscaling:*
                  - ecs:*
                  - sns:*
                  - cloudformation:*
                  - ssm:*
                  - iam:getRole
                Resource: "*"

  DiscordBot:
    Type: AWS::Lambda::Function
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - W3002
    Properties:
      FunctionName: discord_bot
      Handler: lambda_handler.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Code: ../../build/discord_bot
      Environment:
        Variables:
          PublicKey: !Sub ${DiscordPublicKey}
          STACK_NAME: !Sub ${AWS::StackName}
  
  ServerStopper:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: server_stopper
      Handler: index.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Code: 
        ZipFile: !Sub |
          import boto3
          def handler(event, context):
            cfn = boto3.client('cloudformation')
            stack = cfn.describe_stacks(
              StackName="${AWS::StackName}"
            )
            parameters = stack.get("Stacks")[0].get("Parameters")
            def set_state(x):
              if x.get("ParameterKey") == "ServerState":
                x["ParameterValue"] = "Stopped"
              return x
            parameters = list(map(set_state ,parameters))
            cfn.update_stack(
              StackName="${AWS::StackName}",
              UsePreviousTemplate=True,
              Capabilities=['CAPABILITY_IAM'],
              Parameters=parameters
            )

  # Send an update to discord when ec2 instance comes up
  DiscordNotifier:
    Type: AWS::Lambda::Function
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - W3002
    Properties:
      FunctionName: discord_notifier
      Handler: lambda_handler.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Code: ../../build/discord_notifier
      Environment:
        Variables:
          WebhookUrl: !Sub ${WebhookUrl}
          STACK_NAME: !Sub ${AWS::StackName}

  # Lambda to register commands on discord bot (run once manually)
  DiscordInit:
    Type: AWS::Lambda::Function
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - W3002
    Properties:
      FunctionName: discord_init
      Handler: lambda_handler.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Code: ../../build/discord_init
      Environment:
        Variables:
          ApplicationId: !Sub ${DiscordApplicationId}
          BotToken: !Sub ${DiscordBotToken}

  CanStartParameter:
    Type: AWS::SSM::Parameter
    Properties:
      AllowedPattern: (True|False)
      Name: CanStart
      Description: Whether the minecraft server is allowed to start
      Tier: Standard
      Type: String
      Value: "True"
      
  EventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source: 
          - aws.ec2
        detail-type:
          - EC2 Instance State-change Notification
        detail:
          state:
            - running
      Targets:
        - Arn: !GetAtt DiscordNotifier.Arn
          Id: DiscordNotifier

  StartSchedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: !Sub cron${StartScheduleCron}
      Targets:
        - Arn: !GetAtt DiscordNotifier.Arn
          Id: DiscordNotifier
          Input: !Sub |
            {
              "discord_message": "Server can now be started. stop schedule is: ${StopScheduleCron}",
              "desired_state": "Running"
            }

  StopSchedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: !Sub cron${StopScheduleCron}
      Targets: 
        - Arn: !GetAtt DiscordNotifier.Arn
          Id: DiscordNotifier
          Input: !Sub |
            {
              "discord_message": "Server is now stopping, start schedule is: ${StartScheduleCron}",
              "desired_state": "Stopped"
            }

  # ====================================================
  # INSTANCE CONFIG
  # ====================================================

  Ec2Sg:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub "${AWS::StackName}-ec2"
      GroupDescription: !Sub "${AWS::StackName}-ec2"
      SecurityGroupIngress:
      - !If
        - IPv4AddressProvided 
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIPv4}/32"
        - !Ref 'AWS::NoValue'
      - !If
        - IPv6AddressProvided 
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIpv6: !Sub "${YourIPv6}/128"
        - !Ref 'AWS::NoValue'
      - FromPort: 25565
        ToPort: 25565
        IpProtocol: tcp
        CidrIp: 0.0.0.0/0
      VpcId: !Ref Vpc

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName: 
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster} >> /etc/ecs/ecs.config
          yum install -y aws-cli
          mkdir /opt/minecraft
          INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
          aws ec2 attach-volume --volume-id ${Ebs} --instance-id $INSTANCE_ID --device /dev/sdf --region ${AWS::Region}
          while ! ls /dev/nvme1n1 > /dev/null
          do 
            sleep 5
          done
          if [ `file -s /dev/nvme1n1 | cut -d ' ' -f 2` = 'data' ]
          then
            mkfs.ext4 /dev/nvme1n1
          fi
          mount /dev/sdf /opt/minecraft
          chown 845:845 /opt/minecraft
          aws s3 cp s3://${Bucket}/modpack.zip /opt/minecraft/modpack.zip
          yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
          yum install -y noip
          noip2 -C -u ${NoipUsername} -p ${NoipPassword} -I eth0 -U 10
          systemctl enable noip.service
          systemctl start noip.service

  Ebs:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !Select 
      - 1
      - !GetAZs
        Ref: AWS::Region
      Size: 10
      VolumeType: gp3
      Tags:
        - Key: DoBackup
          Value: 'True'

  BackupPolicy:
    Type: AWS::DLM::LifecyclePolicy
    Properties:
      Description: backs up minecraft server
      ExecutionRoleArn: !GetAtt dlmRole.Arn
      State: ENABLED
      PolicyDetails:
        PolicyType: EBS_SNAPSHOT_MANAGEMENT
        ResourceLocations: [CLOUD]
        ResourceTypes: [VOLUME]
        Schedules:
          - CopyTags: True
            CreateRule: 
              CronExpression: cron(0 12 ? * 1 *)
            Name: Backup mc server every monday
            RetainRule: 
              Count: 3
        TargetTags:
          - Key: DoBackup
            Value: 'True'

  dlmRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /service-role/dlm/
      AssumeRolePolicyDocument:
        Statement:
          - Effect: "Allow"
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - dlm.amazonaws.com
      Policies:
        - PolicyName: "dlmPolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateSnapshot
                  - ec2:CreateSnapshots
                  - ec2:DeleteSnapshot
                  - ec2:DescribeVolumes
                  - ec2:DescribeInstances
                  - ec2:DescribeSnapshots
                Resource: "*"
              - Effect: Allow
                Action:
                  - ec2:CreateTags
                Resource: arn:aws:ec2:*::snapshot/*

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
    - Ebs
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration
      MaxSize: !FindInMap [ ServerState, !Ref ServerState, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetB

  InstanceRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Policies:
        - PolicyName: root
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action: 
                  - route53:*
                  - logs:*
                  - s3:*
                  - ec2:AttachVolume
                Resource: "*"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - !Ref InstanceRole

  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster"

  EcsService:
    Type: AWS::ECS::Service
    Properties: 
      Cluster: !Ref EcsCluster
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service"
      TaskDefinition: !Ref EcsTask  
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask:
    Type: AWS::ECS::TaskDefinition
    Properties: 
      Volumes:
      - Host:
          SourcePath: /opt/minecraft
        Name: minecraft
      ContainerDefinitions:      
        - Name: minecraft
          StopTimeout: 120
          MemoryReservation: 4096
          Image: !Sub "itzg/minecraft-server:${MinecraftImageTag}"
          PortMappings:
          - ContainerPort: 25565
            HostPort: 25565
            Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options: 
              awslogs-create-group: 'true'
              awslogs-region: !Sub ${AWS::Region}
              awslogs-group: minecraft
              mode: non-blocking
          MountPoints:
          - ContainerPath: /data
            SourceVolume: minecraft
            ReadOnly: false
          Environment:
            - Name: "EULA"
              Value: "TRUE"
            - Name: USE_AIKAR_FLAGS
              Value: 'true'
            - Name: STOP_DURATION
              Value: 300
            - Name: STOP_SERVER_ANNOUNCE_DELAY
              Value: 15
            - Name: JVM_DD_OPTS
              Value: fml.queryResult:confirm
            - Name: ALLOW_FLIGHT
              Value: 'TRUE'
            - Name: PLAYER_IDLE_TIMEOUT
              Value: 180
            - !If
              - MOTDProvided
              - Name: MOTD
                Value: !Sub ${MOTD}
              - !Ref AWS::NoValue
            - Name: CF_SERVER_MOD
              Value: modpack.zip
            - !If
              - MinecraftTypeTagProvided
              - Name: "TYPE"
                Value: !Sub "${MinecraftTypeTag}"
              - !Ref 'AWS::NoValue'
            - !If
              - AdminPlayerNamesProvided
              - Name: "OPS"
                Value: !Sub "${AdminPlayerNames}"
              - !Ref 'AWS::NoValue'
            - !If
              - DifficultyProvided
              - Name: "DIFFICULTY"
                Value: !Sub "${Difficulty}"
              - !Ref 'AWS::NoValue'
            - !If
              - WhitelistProvided
              - Name: "WHITELIST"
                Value: !Sub "${Whitelist}"
              - !Ref 'AWS::NoValue'
            - !If
              - MinecraftVersionProvided
              - Name: "VERSION"
                Value: !Sub "${MinecraftVersion}"
              - !Ref 'AWS::NoValue'
            - !If
              - MemoryProvided
              - Name: "MEMORY"
                Value: !Sub "${Memory}"
              - !Ref 'AWS::NoValue'
            - !If
              - SeedProvided
              - Name: "SEED"
                Value: !Sub "${Seed}"
              - !Ref 'AWS::NoValue'
            - !If
              - MaxPlayersProvided
              - Name: "MAX_PLAYERS"
                Value: !Sub "${MaxPlayers}"
              - !Ref 'AWS::NoValue'
            - !If
              - ViewDistanceProvided
              - Name: "VIEW_DISTANCE"
                Value: !Sub "${ViewDistance}"
              - !Ref 'AWS::NoValue'
            - !If
              - GameModeProvided
              - Name: "MODE"
                Value: !Sub "${GameMode}"
              - !Ref 'AWS::NoValue'
            - !If
              - LevelTypeProvided
              - Name: "LEVEL_TYPE"
                Value: !Sub "${LevelType}"
              - !Ref 'AWS::NoValue'
            - !If
              - EnableRollingLogsProvided
              - Name: "ENABLE_ROLLING_LOGS"
                Value: !Sub "${EnableRollingLogs}"
              - !Ref 'AWS::NoValue'
            - !If
              - TimezoneProvided
              - Name: "TZ"
                Value: !Sub "${Timezone}"
              - !Ref 'AWS::NoValue'
