# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the mainline branch
  push:
    branches: [ mainline ]
  pull_request:
    branches: [ mainline ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  UnitTests:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          # Version range or exact version of a Python version to use, using SemVer's version range syntax.
          python-version: 3.8
          # The target architecture (x86, x64) of the Python interpreter.
          architecture: x64

      # Runs a set of commands using the runners shell
      - name: Setup Environment
        run: |
          # install global requirements and create build folder
          pip install -r requirements.txt > /dev/null 2>&1
          mkdir build

          # install requirements for each function
          for D in src/lambda/*; do
              if [ -d "${D}" ]; then
                  function_name=$(basename "${D}")
                  echo "Installing ${function_name} requirements" 
                  pip install -r "${D}/requirements.txt" > /dev/null 2>&1
              fi
          done


      - name: Build
        run: |
          for D in src/lambda/*; do
              if [ -d "${D}" ]; then
                  function_name=$(basename "${D}")
                  echo "Copying ${function_name} to build/" 
                  cp -r "${D}/" "build/${function_name}"
              fi
          done

          # copy tests
          for D in tst/lambda/*; do
              if [ -d "${D}" ]; then
                  function_name=$(basename "${D}")
                  echo "copying ${function_name} tests" 
                  cp -r "${D}"/* "build/${function_name}"
              fi
          done

      - name: Test
        run: |
          echo "executing tests"
          cd build || exit
          pytest || { echo "tests failed, exiting" ; exit 1; }
          cd .. || exit
